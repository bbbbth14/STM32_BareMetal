
1.3.OutputCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003cc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003cc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000159f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004dd  00000000  00000000  000215d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00021ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00021c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ae0  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d1c  00000000  00000000  000358c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dd09  00000000  00000000  000375e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b52ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000052c  00000000  00000000  000b5368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003a8 	.word	0x080003a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003a8 	.word	0x080003a8

080001d8 <main>:
#include "stm32f4xx.h"


int main(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

    RCC->AHB1ENR |=  8;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <main+0x7c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a1c      	ldr	r2, [pc, #112]	; (8000254 <main+0x7c>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOD->MODER |=  0x80000000;
 80001e8:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <main+0x80>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <main+0x80>)
 80001ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOD->AFR[0] |= 0x00100000;  // Set AF1 for Timer2
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <main+0x80>)
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	4a17      	ldr	r2, [pc, #92]	; (8000258 <main+0x80>)
 80001fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001fe:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= 1;
 8000200:	4b14      	ldr	r3, [pc, #80]	; (8000254 <main+0x7c>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a13      	ldr	r2, [pc, #76]	; (8000254 <main+0x7c>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 1600 - 1;
 800020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000210:	f240 623f 	movw	r2, #1599	; 0x63f
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 10000 - 1;
 8000216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021a:	f242 720f 	movw	r2, #9999	; 0x270f
 800021e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCMR1 = 0x30;     // Set output to toggle on match
 8000220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000224:	2230      	movs	r2, #48	; 0x30
 8000226:	619a      	str	r2, [r3, #24]
    TIM2->CCR1 = 0;         // Set match mode
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	2200      	movs	r2, #0
 800022e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCER |= 1;         // Enable CH1 compare mode
 8000230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000234:	6a1b      	ldr	r3, [r3, #32]
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6213      	str	r3, [r2, #32]
    TIM2->CNT = 0;           // Clear counter
 8000240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000244:	2200      	movs	r2, #0
 8000246:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->CR1 = 1;           // Enable TIM2
 8000248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024c:	2201      	movs	r2, #1
 800024e:	601a      	str	r2, [r3, #0]


    while (1) {
 8000250:	e7fe      	b.n	8000250 <main+0x78>
 8000252:	bf00      	nop
 8000254:	40023800 	.word	0x40023800
 8000258:	40020c00 	.word	0x40020c00

0800025c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026e:	e7fe      	b.n	800026e <HardFault_Handler+0x4>

08000270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <MemManage_Handler+0x4>

08000276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <BusFault_Handler+0x4>

0800027c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <UsageFault_Handler+0x4>

08000282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b0:	f000 f842 	bl	8000338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <SystemInit+0x28>)
 80002be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <SystemInit+0x28>)
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <SystemInit+0x28>)
 80002ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d2:	609a      	str	r2, [r3, #8]
#endif
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800031c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ea:	e003      	b.n	80002f4 <LoopCopyDataInit>

080002ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002f2:	3104      	adds	r1, #4

080002f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002fc:	d3f6      	bcc.n	80002ec <CopyDataInit>
  ldr  r2, =_sbss
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000300:	e002      	b.n	8000308 <LoopFillZerobss>

08000302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000304:	f842 3b04 	str.w	r3, [r2], #4

08000308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800030a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800030c:	d3f9      	bcc.n	8000302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800030e:	f7ff ffd3 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f825 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000316:	f7ff ff5f 	bl	80001d8 <main>
  bx  lr    
 800031a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800031c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000320:	080003c8 	.word	0x080003c8
  ldr  r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000328:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800032c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000330:	20000024 	.word	0x20000024

08000334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_IncTick+0x20>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_IncTick+0x24>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4413      	add	r3, r2
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <HAL_IncTick+0x24>)
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000
 800035c:	20000020 	.word	0x20000020

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4e0d      	ldr	r6, [pc, #52]	; (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000366:	1ba4      	subs	r4, r4, r6
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2500      	movs	r5, #0
 800036c:	42a5      	cmp	r5, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4e0b      	ldr	r6, [pc, #44]	; (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	; (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2500      	movs	r5, #0
 800037e:	42a5      	cmp	r5, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000388:	4798      	blx	r3
 800038a:	3501      	adds	r5, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000392:	4798      	blx	r3
 8000394:	3501      	adds	r5, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
