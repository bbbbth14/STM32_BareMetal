
1.2.UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001577  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000561  00000000  00000000  000215ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00021b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00021cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013ae0  00000000  00000000  00021e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001dad  00000000  00000000  00035968  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dd3f  00000000  00000000  00037715  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c0  00000000  00000000  000b54d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800047c 	.word	0x0800047c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800047c 	.word	0x0800047c

080001d8 <main>:
void USART2_init (void);
char USART2_read (void);
void LED_play(int value);
void delayMs(int delay);

int main (void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

   char c;

   RCC->AHB1ENR |=  8;             /* enable GPIOD clock */
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <main+0x34>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x34>)
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30
   GPIOA->MODER |=  0x10000000;    /* set pin to output mode */
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <main+0x38>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a08      	ldr	r2, [pc, #32]	; (8000210 <main+0x38>)
 80001f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001f4:	6013      	str	r3, [r2, #0]

	USART2_init();          /* initialize USART2 */
 80001f6:	f000 f80d 	bl	8000214 <USART2_init>

    while(1) {
        c = USART2_read();
 80001fa:	f000 f83d 	bl	8000278 <USART2_read>
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
        LED_play(c);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f84b 	bl	80002a0 <LED_play>
        c = USART2_read();
 800020a:	e7f6      	b.n	80001fa <main+0x22>
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <USART2_init>:
    }
}



void USART2_init (void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

    RCC->APB1ENR |= 0x20000;
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <USART2_init+0x58>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a13      	ldr	r2, [pc, #76]	; (800026c <USART2_init+0x58>)
 800021e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000222:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= 1;
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <USART2_init+0x58>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <USART2_init+0x58>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->AFR[0] |=  0x7000;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <USART2_init+0x5c>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <USART2_init+0x5c>)
 8000236:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800023a:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  |=  0x0080;   /* Set PA3 to alternate function */
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <USART2_init+0x5c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <USART2_init+0x5c>)
 8000242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000246:	6013      	str	r3, [r2, #0]


    USART2->BRR = 0x008B;       // 115200   @ 16 MHz
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <USART2_init+0x60>)
 800024a:	228b      	movs	r2, #139	; 0x8b
 800024c:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x0004;       // enable Tx
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <USART2_init+0x60>)
 8000250:	2204      	movs	r2, #4
 8000252:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= 0x2000;      // enable USART2
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <USART2_init+0x60>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <USART2_init+0x60>)
 800025a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025e:	60d3      	str	r3, [r2, #12]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000
 8000274:	40004400 	.word	0x40004400

08000278 <USART2_read>:

/* Read a character from USART2 */
char USART2_read(void) {
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
    while (!(USART2->SR & 0x0020)) {}   // wait until char arrives
 800027c:	bf00      	nop
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <USART2_read+0x24>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0320 	and.w	r3, r3, #32
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <USART2_read+0x6>
    return USART2->DR;
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <USART2_read+0x24>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	b2db      	uxtb	r3, r3
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40004400 	.word	0x40004400

080002a0 <LED_play>:

/* turn on or off the LEDs according to the value */
void LED_play(int value) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    value %= 16;                    /* cap the max count at 15 */
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	425a      	negs	r2, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	f002 020f 	and.w	r2, r2, #15
 80002b4:	bf58      	it	pl
 80002b6:	4253      	negpl	r3, r2
 80002b8:	607b      	str	r3, [r7, #4]

    for (; value > 0; value--) {
 80002ba:	e014      	b.n	80002e6 <LED_play+0x46>
    	GPIOD->BSRR = 0x4000;    // 0000 0000 0000 0000 0100 0000 0000 0000
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <LED_play+0x54>)
 80002be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002c2:	619a      	str	r2, [r3, #24]
        delayMs(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f000 f817 	bl	80002f8 <delayMs>
    	GPIOD->BSRR = 0x40000000;    // 0100 0000 0000 0000 0000 0000 0000 0000
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <LED_play+0x54>)
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d0:	619a      	str	r2, [r3, #24]
    	delayMs(100);
 80002d2:	2064      	movs	r0, #100	; 0x64
 80002d4:	f000 f810 	bl	80002f8 <delayMs>

    delayMs(400);
 80002d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80002dc:	f000 f80c 	bl	80002f8 <delayMs>
    for (; value > 0; value--) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	dce7      	bgt.n	80002bc <LED_play+0x1c>
}
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <delayMs>:
void delayMs(int delay) {
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    int i;
    for (; delay > 0; delay--)
 8000300:	e00d      	b.n	800031e <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e002      	b.n	800030e <delayMs+0x16>
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000314:	4293      	cmp	r3, r2
 8000316:	ddf7      	ble.n	8000308 <delayMs+0x10>
    for (; delay > 0; delay--)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	dcee      	bgt.n	8000302 <delayMs+0xa>
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000384:	f000 f842 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <SystemInit+0x28>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <SystemInit+0x28>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SystemInit+0x28>)
 80003a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003a6:	609a      	str	r2, [r3, #8]
#endif
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003be:	e003      	b.n	80003c8 <LoopCopyDataInit>

080003c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003c6:	3104      	adds	r1, #4

080003c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d0:	d3f6      	bcc.n	80003c0 <CopyDataInit>
  ldr  r2, =_sbss
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003d4:	e002      	b.n	80003dc <LoopFillZerobss>

080003d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d8:	f842 3b04 	str.w	r3, [r2], #4

080003dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e0:	d3f9      	bcc.n	80003d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003e2:	f7ff ffd3 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f825 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff fef5 	bl	80001d8 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003f4:	0800049c 	.word	0x0800049c
  ldr  r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003fc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000400:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_IncTick+0x20>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_IncTick+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_IncTick+0x24>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4e0d      	ldr	r6, [pc, #52]	; (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043a:	1ba4      	subs	r4, r4, r6
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2500      	movs	r5, #0
 8000440:	42a5      	cmp	r5, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4e0b      	ldr	r6, [pc, #44]	; (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	; (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1ba4      	subs	r4, r4, r6
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2500      	movs	r5, #0
 8000452:	42a5      	cmp	r5, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800045c:	4798      	blx	r3
 800045e:	3501      	adds	r5, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000466:	4798      	blx	r3
 8000468:	3501      	adds	r5, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
